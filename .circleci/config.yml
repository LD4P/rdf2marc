version: 2.1
orbs:
  ruby: circleci/ruby@1.1.4
  aws-cli: circleci/aws-cli@2.0
references:
  default_ruby_version: &default_ruby_version "2.7"
  ruby_envs: &ruby_envs
    environment:
      BUNDLE_JOBS: 3
      BUNDLE_RETRY: 3
executors:
  default:
    parameters:
      ruby_tag:
        description: "The `cimg/ruby` Docker image version tag."
        type: string
        default: *default_ruby_version
    docker:
      - image: cimg/ruby:<< parameters.ruby_tag >>
        <<: *ruby_envs
commands:
  deploy_lambda:
    parameters:
      role-arn:
        type: env_var_name
        default: DEV_ROLE_ARN
      function-name:
        type: string
        default: sinopia-rdf2marc-development
    steps:
      - run: |
          unset AWS_SESSION_TOKEN
          aws configure set output json
          temp_creds=$(aws sts assume-role --role-session-name DevelopersRole --role-arn ${<< parameters.role-arn >>} --profile default | jq .Credentials)
          export AWS_ACCESS_KEY_ID=$(echo "$temp_creds" | jq .AccessKeyId | xargs)
          export AWS_SECRET_ACCESS_KEY=$(echo "$temp_creds" | jq .SecretAccessKey | xargs)
          export AWS_SESSION_TOKEN=$(echo "$temp_creds" | jq .SessionToken | xargs)
          layer_version=$(aws lambda list-layer-versions --layer-name rdf2marcDeps --max-items 1 | jq .LayerVersions[0].Version)
          code_sha_256=$(aws lambda get-layer-version --layer-name rdf2marcDeps --version-number $layer_version | jq -r .Content.CodeSha256)
          new_code_sha_256=$(openssl dgst -sha256 -binary layer.zip | openssl enc -base64)
          if [[ "${code_sha_256}" != "${new_code_sha_256}" ]] ; then
              aws lambda publish-layer-version --layer-name rdf2marcDeps --zip-file fileb://layer.zip
          else
              echo "Layer unchanged"
          fi

          latest_layer_version_arn=$(aws lambda list-layer-versions --layer-name rdf2marcDeps --max-items 1 | jq -r .LayerVersions[0].LayerVersionArn)
          echo "Updating << parameters.function-name >> to layer $latest_layer_version_arn"
          aws lambda update-function-configuration --function-name << parameters.function-name >> --layers $latest_layer_version_arn

          aws lambda update-function-code --function-name << parameters.function-name >> --zip-file fileb://lambda.zip
          aws lambda wait function-updated --function-name << parameters.function-name >>
          aws lambda publish-version --function-name << parameters.function-name >>
jobs:
  build:
    executor: default
    steps:
      - checkout
      - ruby/install-deps:
          key: rdf2marc
  linting:
    executor: default
    steps:
      - checkout
      - ruby/install-deps:
          key: rdf2marc
      - ruby/rubocop-check:
          format: progress
          label: Inspecting with Rubocop
  test:
    executor: default
    steps:
      - checkout
      - ruby/install-deps:
          key: rdf2marc
      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
            ./cc-test-reporter before-build
      - run:
          name: Run tests in parallel
          command: |
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out test_results/rspec.xml \
                              --format progress
      - run:
          name: Send coverage report to Code Climate
          command: |
            ./cc-test-reporter after-build --coverage-input-type simplecov --exit-code $?
      - store_test_results:
          path: test_results
  build_lambda:
    executor: default
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            bundle config set --local deployment 'true'
            bundle config set --local without 'test development'
            bundler install
      - run:
          name: Build layer zip
          command: |
            mkdir -p tmp/ruby/gems
            cp -r vendor/bundle/ruby/2.7.0 tmp/ruby/gems
            cd tmp
            zip -r layer.zip ruby/gems/2.7.0/
            cd ..
            mv tmp/layer.zip .
      - run:
          name: Build lambda zip
          command: |
            zip -r lambda.zip lib Gemfile*
            zip -j lambda.zip lambda-s3/lambda_function.rb
      - persist_to_workspace:
          root: ~/project
          paths: lambda.zip
      - save_cache:
          key: layers-{{ checksum "Gemfile.lock" }}
          paths:
            - ~/project/layer.zip
  deploy_lambda_dev:
    executor: aws-cli/default
    steps:
      - checkout
      - attach_workspace:
            at: .
      - restore_cache:
          key: layers-{{ checksum "Gemfile.lock" }}
      - aws-cli/setup:
          aws-access-key-id: CIRCLE_ACCESS_KEY_ID
          aws-secret-access-key: CIRCLE_SECRET_KEY
          aws-region: AWS_DEFAULT_REGION
      - deploy_lambda
  deploy_lambda_stage:
    executor: aws-cli/default
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          key: layers-{{ checksum "Gemfile.lock" }}
      - aws-cli/setup:
          aws-access-key-id: CIRCLE_ACCESS_KEY_ID
          aws-secret-access-key: CIRCLE_SECRET_KEY
          aws-region: AWS_DEFAULT_REGION
      - deploy_lambda:
          role-arn: STAGE_ROLE_ARN
          function-name: sinopia-rdf2marc-staging
  deploy_lambda_prod:
    executor: aws-cli/default
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          key: layers-{{ checksum "Gemfile.lock" }}
      - aws-cli/setup:
          aws-access-key-id: CIRCLE_ACCESS_KEY_ID
          aws-secret-access-key: CIRCLE_SECRET_KEY
          aws-region: AWS_DEFAULT_REGION
      - deploy_lambda:
          role-arn: PROD_ROLE_ARN
          function-name: sinopia-rdf2marc-production
workflows:
  version: 2
  build:
    jobs:
      - build:
          filters:
            tags:
              only:
                - /v.[0-9\.]+(-beta)?/
      - linting:
          requires:
            - build
          filters:
            tags:
              only:
                - /v.[0-9\.]+(-beta)?/
      - test:
          requires:
            - build
          filters:
            tags:
              only:
                - /v.[0-9\.]+(-beta)?/
      - build_lambda:
          requires:
            - test
            - linting
          filters:
            branches:
              only:
                - main
            tags:
              only:
                - /v.[0-9\.]+(-beta)?/
      - deploy_lambda_dev:
          context: ld4p
          requires:
            - build_lambda
          filters:
            branches:
              only:
                - main
            tags:
              ignore:
                - /v.*/
      - deploy_lambda_stage:
          context: ld4p
          requires:
            - build_lambda
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /v.[0-9\.]+(-beta)?/
      - deploy_lambda_prod:
          context: ld4p
          requires:
            - build_lambda
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /v.[0-9\.]+/
